diff --git a/node_modules/@types/uuid/.17dffcfffebf75bc-00000002.index.d.ts b/.17dffcfffebf75bc-00000002.index.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..2f7d81378475dc4ce52c14c14b8691975029780f
--- /dev/null
+++ b/.17dffcfffebf75bc-00000002.index.d.ts
@@ -0,0 +1,86 @@
+// disable automatic export
+export {};
+
+// Uses ArrayLike to admit Uint8 and co.
+type OutputBuffer = ArrayLike<number>;
+type InputBuffer = ArrayLike<number>;
+
+interface RandomOptions {
+    /** `Array` of 16 random bytes (0-255) */
+    random?: InputBuffer | undefined;
+}
+interface RngOptions {
+    /** Alternative to `options.random`, a `Function` that returns an `Array` of 16 random bytes (0-255) */
+    rng?: (() => InputBuffer) | undefined;
+}
+
+interface V1BaseOptions {
+    /** RFC "node" field as an `Array[6]` of byte values (per 4.1.6) */
+    node?: InputBuffer | undefined;
+    /** RFC "clock sequence" as a `Number` between 0 - 0x3fff */
+    clockseq?: number | undefined;
+    /** RFC "timestamp" field (`Number` of milliseconds, unix epoch) */
+    msecs?: number | Date | undefined;
+    /** RFC "timestamp" field (`Number` of nanoseconds to add to msecs, should be 0-10,000) */
+    nsecs?: number | undefined;
+}
+interface V1RandomOptions extends V1BaseOptions, RandomOptions {}
+interface V1RngOptions extends V1BaseOptions, RngOptions {}
+
+export type V1Options = V1RandomOptions | V1RngOptions;
+export type V4Options = RandomOptions | RngOptions;
+
+type v1String = (options?: V1Options) => string;
+type v1Buffer = <T extends OutputBuffer>(options: V1Options | null | undefined, buffer: T, offset?: number) => T;
+type v1 = v1Buffer & v1String;
+
+type v4String = (options?: V4Options) => string;
+type v4Buffer = <T extends OutputBuffer>(options: V4Options | null | undefined, buffer: T, offset?: number) => T;
+type v4 = v4Buffer & v4String;
+
+type v3String = (name: string | InputBuffer, namespace: string | InputBuffer) => string;
+type v3Buffer = <T extends OutputBuffer>(
+    name: string | InputBuffer,
+    namespace: string | InputBuffer,
+    buffer: T,
+    offset?: number,
+) => T;
+interface v3Static {
+    // https://github.com/uuidjs/uuid/blob/master/src/v35.js#L16
+    DNS: string;
+    // https://github.com/uuidjs/uuid/blob/master/src/v35.js#L17
+    URL: string;
+}
+type v3 = v3Buffer & v3String & v3Static;
+
+type v5String = (name: string | InputBuffer, namespace: string | InputBuffer) => string;
+type v5Buffer = <T extends OutputBuffer>(
+    name: string | InputBuffer,
+    namespace: string | InputBuffer,
+    buffer: T,
+    offset?: number,
+) => T;
+interface v5Static {
+    // https://github.com/uuidjs/uuid/blob/master/src/v35.js#L16
+    DNS: string;
+    // https://github.com/uuidjs/uuid/blob/master/src/v35.js#L17
+    URL: string;
+}
+type v5 = v5Buffer & v5String & v5Static;
+
+type NIL = string;
+
+type parse = (uuid: string) => Uint8Array;
+type stringify = (buffer: InputBuffer, offset?: number) => string;
+type validate = (uuid: string) => boolean;
+type version = (uuid: string) => number;
+
+export const NIL: NIL;
+export const parse: parse;
+export const stringify: stringify;
+export const v1: v1;
+export const v3: v3;
+export const v4: v4;
+export const v5: v5;
+export const validate: validate;
+export const version: version;
diff --git a/node_modules/@types/uuid/.3fdabe7eedfb6cdb-00000001.index.d.mts b/.3fdabe7eedfb6cdb-00000001.index.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..47a65990c8b238fdd1a04f94291dcb2fcff2b715
--- /dev/null
+++ b/.3fdabe7eedfb6cdb-00000001.index.d.mts
@@ -0,0 +1,12 @@
+import uuid from "./index.js";
+export import v1 = uuid.v1;
+export import v3 = uuid.v3;
+export import v4 = uuid.v4;
+export import v5 = uuid.v5;
+export import NIL = uuid.NIL;
+export import version = uuid.version;
+export import validate = uuid.validate;
+export import stringify = uuid.stringify;
+export import parse = uuid.parse;
+export import V1Options = uuid.V1Options;
+export import V4Options = uuid.V4Options;
diff --git a/node_modules/@types/uuid/.3fdad57ffa37f9d8-00000004.package.json b/.3fdad57ffa37f9d8-00000004.package.json
new file mode 100644
index 0000000000000000000000000000000000000000..09959ce22b697c1f3c823a12a34df80a7dc8b6e1
--- /dev/null
+++ b/.3fdad57ffa37f9d8-00000004.package.json
@@ -0,0 +1,54 @@
+{
+    "name": "@types/uuid",
+    "version": "9.0.8",
+    "description": "TypeScript definitions for uuid",
+    "homepage": "https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/uuid",
+    "license": "MIT",
+    "contributors": [
+        {
+            "name": "Oliver Hoffmann",
+            "githubUsername": "iamolivinius",
+            "url": "https://github.com/iamolivinius"
+        },
+        {
+            "name": "Felipe Ochoa",
+            "githubUsername": "felipeochoa",
+            "url": "https://github.com/felipeochoa"
+        },
+        {
+            "name": "Chris Barth",
+            "githubUsername": "cjbarth",
+            "url": "https://github.com/cjbarth"
+        },
+        {
+            "name": "Linus Unnebäck",
+            "githubUsername": "LinusU",
+            "url": "https://github.com/LinusU"
+        },
+        {
+            "name": "Christoph Tavan",
+            "githubUsername": "ctavan",
+            "url": "https://github.com/ctavan"
+        }
+    ],
+    "main": "",
+    "types": "index.d.ts",
+    "exports": {
+        "./package.json": "./package.json",
+        ".": {
+            "types": {
+                "import": "./index.d.mts",
+                "default": "./index.d.ts"
+            }
+        }
+    },
+    "repository": {
+        "type": "git",
+        "url": "https://github.com/DefinitelyTyped/DefinitelyTyped.git",
+        "directory": "types/uuid"
+    },
+    "scripts": {},
+    "dependencies": {},
+    "typesPublisherContentHash": "ee6ba7ad17fbbead7a508faf213a9ad0f49c12929e8c6b0f05fb35129bc72d61",
+    "typeScriptVersion": "4.6"
+}
\ No newline at end of file
diff --git a/node_modules/@types/uuid/.5ffbbd7ffbcb7fe8-00000005.README.md b/.5ffbbd7ffbcb7fe8-00000005.README.md
new file mode 100644
index 0000000000000000000000000000000000000000..f1266d46431f934a36a661c5d973f0a895d4721c
--- /dev/null
+++ b/.5ffbbd7ffbcb7fe8-00000005.README.md
@@ -0,0 +1,15 @@
+# Installation
+> `npm install --save @types/uuid`
+
+# Summary
+This package contains type definitions for uuid (https://github.com/uuidjs/uuid).
+
+# Details
+Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/uuid.
+
+### Additional Details
+ * Last updated: Thu, 25 Jan 2024 23:07:19 GMT
+ * Dependencies: none
+
+# Credits
+These definitions were written by [Oliver Hoffmann](https://github.com/iamolivinius), [Felipe Ochoa](https://github.com/felipeochoa), [Chris Barth](https://github.com/cjbarth), [Linus Unnebäck](https://github.com/LinusU), and [Christoph Tavan](https://github.com/ctavan).
diff --git a/node_modules/@types/uuid/.ffdfedfeee7dfbf7-00000003.LICENSE b/.ffdfedfeee7dfbf7-00000003.LICENSE
new file mode 100644
index 0000000000000000000000000000000000000000..9e841e7a26e4eb057b24511e7b92d42b257a80e5
--- /dev/null
+++ b/.ffdfedfeee7dfbf7-00000003.LICENSE
@@ -0,0 +1,21 @@
+    MIT License
+
+    Copyright (c) Microsoft Corporation.
+
+    Permission is hereby granted, free of charge, to any person obtaining a copy
+    of this software and associated documentation files (the "Software"), to deal
+    in the Software without restriction, including without limitation the rights
+    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+    copies of the Software, and to permit persons to whom the Software is
+    furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice shall be included in all
+    copies or substantial portions of the Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+    SOFTWARE
diff --git a/index.d.mts b/index.d.mts
index 47a65990c8b238fdd1a04f94291dcb2fcff2b715..91e68d609fe680af2833fa8a9641486f1355fc4a 100644
--- a/index.d.mts
+++ b/index.d.mts
@@ -3,6 +3,9 @@ export import v1 = uuid.v1;
 export import v3 = uuid.v3;
 export import v4 = uuid.v4;
 export import v5 = uuid.v5;
+export import v6 = uuid.v6;
+export import v7 = uuid.v7;
+export import v6ToV1 = uuid.v6ToV1;
 export import NIL = uuid.NIL;
 export import version = uuid.version;
 export import validate = uuid.validate;
diff --git a/index.d.ts b/index.d.ts
index 2f7d81378475dc4ce52c14c14b8691975029780f..a9e7cc22e89f93df17e7d82a3c96e7cbd728d8ef 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -68,6 +68,9 @@ interface v5Static {
 }
 type v5 = v5Buffer & v5String & v5Static;
 
+type v6 = v1;
+type v7 = v1;
+
 type NIL = string;
 
 type parse = (uuid: string) => Uint8Array;
@@ -82,5 +85,8 @@ export const v1: v1;
 export const v3: v3;
 export const v4: v4;
 export const v5: v5;
+export const v6: v6;
+export const v7: v7;
+export const v6ToV1: <T extends string | Uint8Array>(uuid: T) => T;
 export const validate: validate;
 export const version: version;
