diff --git a/types/croner.d.cts b/types/croner.d.cts
index a75b7256ae6a19c8471b8f76ac05b94195165d18..4a5b82d8f243d98ba3d475294e47d39e296f26ab 100644
--- a/types/croner.d.cts
+++ b/types/croner.d.cts
@@ -1,25 +1,26 @@
 export = Cron;
+type CronFunction = (self: Cron, context?: any) => unknown;
 /**
  * Cron entrypoint
  *
  * @constructor
  * @param {string|Date} pattern - Input pattern, input date, or input ISO 8601 time string
- * @param {CronOptions|Function} [fnOrOptions1] - Options or function to be run each iteration of pattern
- * @param {CronOptions|Function} [fnOrOptions2] - Options or function to be run each iteration of pattern
+ * @param {CronOptions|CronFunction} [fnOrOptions1] - Options or function to be run each iteration of pattern
+ * @param {CronOptions|CronFunction} [fnOrOptions2] - Options or function to be run each iteration of pattern
  * @returns {Cron}
  */
-declare function Cron(pattern: string | Date, fnOrOptions1?: CronOptions | Function, fnOrOptions2?: CronOptions | Function): Cron;
+declare function Cron(pattern: string | Date, fnOrOptions1?: CronOptions | CronFunction, fnOrOptions2?: CronOptions | CronFunction): Cron;
 declare class Cron {
     /**
      * Cron entrypoint
      *
      * @constructor
      * @param {string|Date} pattern - Input pattern, input date, or input ISO 8601 time string
-     * @param {CronOptions|Function} [fnOrOptions1] - Options or function to be run each iteration of pattern
-     * @param {CronOptions|Function} [fnOrOptions2] - Options or function to be run each iteration of pattern
+     * @param {CronOptions|CronFunction} [fnOrOptions1] - Options or function to be run each iteration of pattern
+     * @param {CronOptions|CronFunction} [fnOrOptions2] - Options or function to be run each iteration of pattern
      * @returns {Cron}
      */
-    constructor(pattern: string | Date, fnOrOptions1?: CronOptions | Function, fnOrOptions2?: CronOptions | Function);
+    constructor(pattern: string | Date, fnOrOptions1?: CronOptions | CronFunction, fnOrOptions2?: CronOptions | CronFunction);
     /**
      * @public
      * @type {string|undefined} */
@@ -34,7 +35,7 @@ declare class Cron {
      * @private
      */
     private _states;
-    fn: Function | CronOptions;
+    fn: CronFunction | CronOptions;
     /**
      * Find next runtime, based on supplied date. Strips milliseconds.
      *
diff --git a/types/croner.d.ts b/types/croner.d.ts
index 0cd3bbc64861a5c3ca2fa399ad5f0673c2c9fd43..34191ceb8ecee2b7ff7c9b8f597217a61c80fa2b 100644
--- a/types/croner.d.ts
+++ b/types/croner.d.ts
@@ -1,3 +1,4 @@
+type CronFunction = (self: Cron, context?: any) => unknown;
 export type TimePoint = {
     /**
      * - 1970--
@@ -108,22 +109,22 @@ export type CronIndexOffset = number;
  *
  * @constructor
  * @param {string|Date} pattern - Input pattern, input date, or input ISO 8601 time string
- * @param {CronOptions|Function} [fnOrOptions1] - Options or function to be run each iteration of pattern
- * @param {CronOptions|Function} [fnOrOptions2] - Options or function to be run each iteration of pattern
+ * @param {CronOptions|CronFunction} [fnOrOptions1] - Options or function to be run each iteration of pattern
+ * @param {CronOptions|CronFunction} [fnOrOptions2] - Options or function to be run each iteration of pattern
  * @returns {Cron}
  */
-export function Cron(pattern: string | Date, fnOrOptions1?: CronOptions | Function, fnOrOptions2?: CronOptions | Function): Cron;
+export function Cron(pattern: string | Date, fnOrOptions1?: CronOptions | CronFunction, fnOrOptions2?: CronOptions | CronFunction): Cron;
 export class Cron {
     /**
      * Cron entrypoint
      *
      * @constructor
      * @param {string|Date} pattern - Input pattern, input date, or input ISO 8601 time string
-     * @param {CronOptions|Function} [fnOrOptions1] - Options or function to be run each iteration of pattern
-     * @param {CronOptions|Function} [fnOrOptions2] - Options or function to be run each iteration of pattern
+     * @param {CronOptions|CronFunction} [fnOrOptions1] - Options or function to be run each iteration of pattern
+     * @param {CronOptions|CronFunction} [fnOrOptions2] - Options or function to be run each iteration of pattern
      * @returns {Cron}
      */
-    constructor(pattern: string | Date, fnOrOptions1?: CronOptions | Function, fnOrOptions2?: CronOptions | Function);
+    constructor(pattern: string | Date, fnOrOptions1?: CronOptions | CronFunction, fnOrOptions2?: CronOptions | CronFunction);
     /**
      * @public
      * @type {string|undefined} */
@@ -138,7 +139,7 @@ export class Cron {
      * @private
      */
     private _states;
-    fn: Function | CronOptions;
+    fn: CronFunction | CronOptions;
     /**
      * Find next runtime, based on supplied date. Strips milliseconds.
      *
