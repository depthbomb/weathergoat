// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace WeatherGoat.Data.CompiledModels
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var coordinateInfo = CoordinateInfoEntityType.Create(this);
            var sentAlert = SentAlertEntityType.Create(this);

            CoordinateInfoEntityType.CreateAnnotations(coordinateInfo);
            SentAlertEntityType.CreateAnnotations(sentAlert);

            AddAnnotation("ProductVersion", "8.0.0-preview.6.23329.4");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var coordinateInfo = FindEntityType("WeatherGoat.Data.Entities.CoordinateInfo")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            coordinateInfo.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var weatherGoatDataEntitiesCoordinateInfoTableBase = new TableBase("WeatherGoat.Data.Entities.CoordinateInfo", null, relationalModel);
            var countyIdColumnBase = new ColumnBase<ColumnMappingBase>("CountyId", "TEXT", weatherGoatDataEntitiesCoordinateInfoTableBase)
            {
                IsNullable = true
            };
            weatherGoatDataEntitiesCoordinateInfoTableBase.Columns.Add("CountyId", countyIdColumnBase);
            var forecastUrlColumnBase = new ColumnBase<ColumnMappingBase>("ForecastUrl", "TEXT", weatherGoatDataEntitiesCoordinateInfoTableBase)
            {
                IsNullable = true
            };
            weatherGoatDataEntitiesCoordinateInfoTableBase.Columns.Add("ForecastUrl", forecastUrlColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "TEXT", weatherGoatDataEntitiesCoordinateInfoTableBase);
            weatherGoatDataEntitiesCoordinateInfoTableBase.Columns.Add("Id", idColumnBase);
            var latitudeColumnBase = new ColumnBase<ColumnMappingBase>("Latitude", "TEXT", weatherGoatDataEntitiesCoordinateInfoTableBase)
            {
                IsNullable = true
            };
            weatherGoatDataEntitiesCoordinateInfoTableBase.Columns.Add("Latitude", latitudeColumnBase);
            var locationColumnBase = new ColumnBase<ColumnMappingBase>("Location", "TEXT", weatherGoatDataEntitiesCoordinateInfoTableBase)
            {
                IsNullable = true
            };
            weatherGoatDataEntitiesCoordinateInfoTableBase.Columns.Add("Location", locationColumnBase);
            var longitudeColumnBase = new ColumnBase<ColumnMappingBase>("Longitude", "TEXT", weatherGoatDataEntitiesCoordinateInfoTableBase)
            {
                IsNullable = true
            };
            weatherGoatDataEntitiesCoordinateInfoTableBase.Columns.Add("Longitude", longitudeColumnBase);
            var radarImageUrlColumnBase = new ColumnBase<ColumnMappingBase>("RadarImageUrl", "TEXT", weatherGoatDataEntitiesCoordinateInfoTableBase)
            {
                IsNullable = true
            };
            weatherGoatDataEntitiesCoordinateInfoTableBase.Columns.Add("RadarImageUrl", radarImageUrlColumnBase);
            var zoneIdColumnBase = new ColumnBase<ColumnMappingBase>("ZoneId", "TEXT", weatherGoatDataEntitiesCoordinateInfoTableBase)
            {
                IsNullable = true
            };
            weatherGoatDataEntitiesCoordinateInfoTableBase.Columns.Add("ZoneId", zoneIdColumnBase);
            relationalModel.DefaultTables.Add("WeatherGoat.Data.Entities.CoordinateInfo", weatherGoatDataEntitiesCoordinateInfoTableBase);
            var weatherGoatDataEntitiesCoordinateInfoMappingBase = new TableMappingBase<ColumnMappingBase>(coordinateInfo, weatherGoatDataEntitiesCoordinateInfoTableBase, true);
            weatherGoatDataEntitiesCoordinateInfoTableBase.AddEntityTypeMapping(weatherGoatDataEntitiesCoordinateInfoMappingBase, false);
            defaultTableMappings.Add(weatherGoatDataEntitiesCoordinateInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weatherGoatDataEntitiesCoordinateInfoTableBase.FindColumn("Id")!, coordinateInfo.FindProperty("Id")!, weatherGoatDataEntitiesCoordinateInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weatherGoatDataEntitiesCoordinateInfoTableBase.FindColumn("CountyId")!, coordinateInfo.FindProperty("CountyId")!, weatherGoatDataEntitiesCoordinateInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weatherGoatDataEntitiesCoordinateInfoTableBase.FindColumn("ForecastUrl")!, coordinateInfo.FindProperty("ForecastUrl")!, weatherGoatDataEntitiesCoordinateInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weatherGoatDataEntitiesCoordinateInfoTableBase.FindColumn("Latitude")!, coordinateInfo.FindProperty("Latitude")!, weatherGoatDataEntitiesCoordinateInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weatherGoatDataEntitiesCoordinateInfoTableBase.FindColumn("Location")!, coordinateInfo.FindProperty("Location")!, weatherGoatDataEntitiesCoordinateInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weatherGoatDataEntitiesCoordinateInfoTableBase.FindColumn("Longitude")!, coordinateInfo.FindProperty("Longitude")!, weatherGoatDataEntitiesCoordinateInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weatherGoatDataEntitiesCoordinateInfoTableBase.FindColumn("RadarImageUrl")!, coordinateInfo.FindProperty("RadarImageUrl")!, weatherGoatDataEntitiesCoordinateInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weatherGoatDataEntitiesCoordinateInfoTableBase.FindColumn("ZoneId")!, coordinateInfo.FindProperty("ZoneId")!, weatherGoatDataEntitiesCoordinateInfoMappingBase);

            var tableMappings = new List<TableMapping>();
            coordinateInfo.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var coordinateInfoTable = new Table("CoordinateInfo", null, relationalModel);
            var idColumn = new Column("Id", "TEXT", coordinateInfoTable);
            coordinateInfoTable.Columns.Add("Id", idColumn);
            var countyIdColumn = new Column("CountyId", "TEXT", coordinateInfoTable)
            {
                IsNullable = true
            };
            coordinateInfoTable.Columns.Add("CountyId", countyIdColumn);
            var forecastUrlColumn = new Column("ForecastUrl", "TEXT", coordinateInfoTable)
            {
                IsNullable = true
            };
            coordinateInfoTable.Columns.Add("ForecastUrl", forecastUrlColumn);
            var latitudeColumn = new Column("Latitude", "TEXT", coordinateInfoTable)
            {
                IsNullable = true
            };
            coordinateInfoTable.Columns.Add("Latitude", latitudeColumn);
            var locationColumn = new Column("Location", "TEXT", coordinateInfoTable)
            {
                IsNullable = true
            };
            coordinateInfoTable.Columns.Add("Location", locationColumn);
            var longitudeColumn = new Column("Longitude", "TEXT", coordinateInfoTable)
            {
                IsNullable = true
            };
            coordinateInfoTable.Columns.Add("Longitude", longitudeColumn);
            var radarImageUrlColumn = new Column("RadarImageUrl", "TEXT", coordinateInfoTable)
            {
                IsNullable = true
            };
            coordinateInfoTable.Columns.Add("RadarImageUrl", radarImageUrlColumn);
            var zoneIdColumn = new Column("ZoneId", "TEXT", coordinateInfoTable)
            {
                IsNullable = true
            };
            coordinateInfoTable.Columns.Add("ZoneId", zoneIdColumn);
            var pK_CoordinateInfo = new UniqueConstraint("PK_CoordinateInfo", coordinateInfoTable, new[] { idColumn });
            coordinateInfoTable.PrimaryKey = pK_CoordinateInfo;
            var pK_CoordinateInfoUc = RelationalModel.GetKey(this,
                "WeatherGoat.Data.Entities.CoordinateInfo",
                new[] { "Id" });
            pK_CoordinateInfo.MappedKeys.Add(pK_CoordinateInfoUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CoordinateInfoUc).Add(pK_CoordinateInfo);
            coordinateInfoTable.UniqueConstraints.Add("PK_CoordinateInfo", pK_CoordinateInfo);
            relationalModel.Tables.Add(("CoordinateInfo", null), coordinateInfoTable);
            var coordinateInfoTableMapping = new TableMapping(coordinateInfo, coordinateInfoTable, true);
            coordinateInfoTable.AddEntityTypeMapping(coordinateInfoTableMapping, false);
            tableMappings.Add(coordinateInfoTableMapping);
            RelationalModel.CreateColumnMapping(coordinateInfoTable.FindColumn("Id")!, coordinateInfo.FindProperty("Id")!, coordinateInfoTableMapping);
            RelationalModel.CreateColumnMapping(coordinateInfoTable.FindColumn("CountyId")!, coordinateInfo.FindProperty("CountyId")!, coordinateInfoTableMapping);
            RelationalModel.CreateColumnMapping(coordinateInfoTable.FindColumn("ForecastUrl")!, coordinateInfo.FindProperty("ForecastUrl")!, coordinateInfoTableMapping);
            RelationalModel.CreateColumnMapping(coordinateInfoTable.FindColumn("Latitude")!, coordinateInfo.FindProperty("Latitude")!, coordinateInfoTableMapping);
            RelationalModel.CreateColumnMapping(coordinateInfoTable.FindColumn("Location")!, coordinateInfo.FindProperty("Location")!, coordinateInfoTableMapping);
            RelationalModel.CreateColumnMapping(coordinateInfoTable.FindColumn("Longitude")!, coordinateInfo.FindProperty("Longitude")!, coordinateInfoTableMapping);
            RelationalModel.CreateColumnMapping(coordinateInfoTable.FindColumn("RadarImageUrl")!, coordinateInfo.FindProperty("RadarImageUrl")!, coordinateInfoTableMapping);
            RelationalModel.CreateColumnMapping(coordinateInfoTable.FindColumn("ZoneId")!, coordinateInfo.FindProperty("ZoneId")!, coordinateInfoTableMapping);

            var sentAlert = FindEntityType("WeatherGoat.Data.Entities.SentAlert")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            sentAlert.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var weatherGoatDataEntitiesSentAlertTableBase = new TableBase("WeatherGoat.Data.Entities.SentAlert", null, relationalModel);
            var alertIdColumnBase = new ColumnBase<ColumnMappingBase>("AlertId", "TEXT", weatherGoatDataEntitiesSentAlertTableBase)
            {
                IsNullable = true
            };
            weatherGoatDataEntitiesSentAlertTableBase.Columns.Add("AlertId", alertIdColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", weatherGoatDataEntitiesSentAlertTableBase);
            weatherGoatDataEntitiesSentAlertTableBase.Columns.Add("Id", idColumnBase0);
            relationalModel.DefaultTables.Add("WeatherGoat.Data.Entities.SentAlert", weatherGoatDataEntitiesSentAlertTableBase);
            var weatherGoatDataEntitiesSentAlertMappingBase = new TableMappingBase<ColumnMappingBase>(sentAlert, weatherGoatDataEntitiesSentAlertTableBase, true);
            weatherGoatDataEntitiesSentAlertTableBase.AddEntityTypeMapping(weatherGoatDataEntitiesSentAlertMappingBase, false);
            defaultTableMappings0.Add(weatherGoatDataEntitiesSentAlertMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weatherGoatDataEntitiesSentAlertTableBase.FindColumn("Id")!, sentAlert.FindProperty("Id")!, weatherGoatDataEntitiesSentAlertMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weatherGoatDataEntitiesSentAlertTableBase.FindColumn("AlertId")!, sentAlert.FindProperty("AlertId")!, weatherGoatDataEntitiesSentAlertMappingBase);

            var tableMappings0 = new List<TableMapping>();
            sentAlert.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var alertsTable = new Table("Alerts", null, relationalModel);
            var idColumn0 = new Column("Id", "TEXT", alertsTable);
            alertsTable.Columns.Add("Id", idColumn0);
            var alertIdColumn = new Column("AlertId", "TEXT", alertsTable)
            {
                IsNullable = true
            };
            alertsTable.Columns.Add("AlertId", alertIdColumn);
            var pK_Alerts = new UniqueConstraint("PK_Alerts", alertsTable, new[] { idColumn0 });
            alertsTable.PrimaryKey = pK_Alerts;
            var pK_AlertsUc = RelationalModel.GetKey(this,
                "WeatherGoat.Data.Entities.SentAlert",
                new[] { "Id" });
            pK_Alerts.MappedKeys.Add(pK_AlertsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AlertsUc).Add(pK_Alerts);
            alertsTable.UniqueConstraints.Add("PK_Alerts", pK_Alerts);
            relationalModel.Tables.Add(("Alerts", null), alertsTable);
            var alertsTableMapping = new TableMapping(sentAlert, alertsTable, true);
            alertsTable.AddEntityTypeMapping(alertsTableMapping, false);
            tableMappings0.Add(alertsTableMapping);
            RelationalModel.CreateColumnMapping(alertsTable.FindColumn("Id")!, sentAlert.FindProperty("Id")!, alertsTableMapping);
            RelationalModel.CreateColumnMapping(alertsTable.FindColumn("AlertId")!, sentAlert.FindProperty("AlertId")!, alertsTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
