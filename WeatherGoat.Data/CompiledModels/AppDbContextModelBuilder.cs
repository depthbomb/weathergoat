// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace WeatherGoat.Data.CompiledModels
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var alertDestination = AlertDestinationEntityType.Create(this);
            var feature = FeatureEntityType.Create(this);
            var forecastDestination = ForecastDestinationEntityType.Create(this);
            var sentAlert = SentAlertEntityType.Create(this);
            var volatileMessage = VolatileMessageEntityType.Create(this);

            AlertDestinationEntityType.CreateAnnotations(alertDestination);
            FeatureEntityType.CreateAnnotations(feature);
            ForecastDestinationEntityType.CreateAnnotations(forecastDestination);
            SentAlertEntityType.CreateAnnotations(sentAlert);
            VolatileMessageEntityType.CreateAnnotations(volatileMessage);

            AddAnnotation("ProductVersion", "8.0.1");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var alertDestination = FindEntityType("WeatherGoat.Data.Entities.AlertDestination")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            alertDestination.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var weatherGoatDataEntitiesAlertDestinationTableBase = new TableBase("WeatherGoat.Data.Entities.AlertDestination", null, relationalModel);
            var autoCleanupColumnBase = new ColumnBase<ColumnMappingBase>("AutoCleanup", "INTEGER", weatherGoatDataEntitiesAlertDestinationTableBase);
            weatherGoatDataEntitiesAlertDestinationTableBase.Columns.Add("AutoCleanup", autoCleanupColumnBase);
            var channelIdColumnBase = new ColumnBase<ColumnMappingBase>("ChannelId", "INTEGER", weatherGoatDataEntitiesAlertDestinationTableBase);
            weatherGoatDataEntitiesAlertDestinationTableBase.Columns.Add("ChannelId", channelIdColumnBase);
            var countyIdColumnBase = new ColumnBase<ColumnMappingBase>("CountyId", "TEXT", weatherGoatDataEntitiesAlertDestinationTableBase);
            weatherGoatDataEntitiesAlertDestinationTableBase.Columns.Add("CountyId", countyIdColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "TEXT", weatherGoatDataEntitiesAlertDestinationTableBase);
            weatherGoatDataEntitiesAlertDestinationTableBase.Columns.Add("Id", idColumnBase);
            var latitudeColumnBase = new ColumnBase<ColumnMappingBase>("Latitude", "TEXT", weatherGoatDataEntitiesAlertDestinationTableBase);
            weatherGoatDataEntitiesAlertDestinationTableBase.Columns.Add("Latitude", latitudeColumnBase);
            var longitudeColumnBase = new ColumnBase<ColumnMappingBase>("Longitude", "TEXT", weatherGoatDataEntitiesAlertDestinationTableBase);
            weatherGoatDataEntitiesAlertDestinationTableBase.Columns.Add("Longitude", longitudeColumnBase);
            var radarImageUrlColumnBase = new ColumnBase<ColumnMappingBase>("RadarImageUrl", "TEXT", weatherGoatDataEntitiesAlertDestinationTableBase);
            weatherGoatDataEntitiesAlertDestinationTableBase.Columns.Add("RadarImageUrl", radarImageUrlColumnBase);
            var zoneIdColumnBase = new ColumnBase<ColumnMappingBase>("ZoneId", "TEXT", weatherGoatDataEntitiesAlertDestinationTableBase);
            weatherGoatDataEntitiesAlertDestinationTableBase.Columns.Add("ZoneId", zoneIdColumnBase);
            relationalModel.DefaultTables.Add("WeatherGoat.Data.Entities.AlertDestination", weatherGoatDataEntitiesAlertDestinationTableBase);
            var weatherGoatDataEntitiesAlertDestinationMappingBase = new TableMappingBase<ColumnMappingBase>(alertDestination, weatherGoatDataEntitiesAlertDestinationTableBase, true);
            weatherGoatDataEntitiesAlertDestinationTableBase.AddTypeMapping(weatherGoatDataEntitiesAlertDestinationMappingBase, false);
            defaultTableMappings.Add(weatherGoatDataEntitiesAlertDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, alertDestination.FindProperty("Id")!, weatherGoatDataEntitiesAlertDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)autoCleanupColumnBase, alertDestination.FindProperty("AutoCleanup")!, weatherGoatDataEntitiesAlertDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase, alertDestination.FindProperty("ChannelId")!, weatherGoatDataEntitiesAlertDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)countyIdColumnBase, alertDestination.FindProperty("CountyId")!, weatherGoatDataEntitiesAlertDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latitudeColumnBase, alertDestination.FindProperty("Latitude")!, weatherGoatDataEntitiesAlertDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)longitudeColumnBase, alertDestination.FindProperty("Longitude")!, weatherGoatDataEntitiesAlertDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)radarImageUrlColumnBase, alertDestination.FindProperty("RadarImageUrl")!, weatherGoatDataEntitiesAlertDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)zoneIdColumnBase, alertDestination.FindProperty("ZoneId")!, weatherGoatDataEntitiesAlertDestinationMappingBase);

            var tableMappings = new List<TableMapping>();
            alertDestination.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var alertDestinationsTable = new Table("AlertDestinations", null, relationalModel);
            var idColumn = new Column("Id", "TEXT", alertDestinationsTable);
            alertDestinationsTable.Columns.Add("Id", idColumn);
            var autoCleanupColumn = new Column("AutoCleanup", "INTEGER", alertDestinationsTable);
            alertDestinationsTable.Columns.Add("AutoCleanup", autoCleanupColumn);
            var channelIdColumn = new Column("ChannelId", "INTEGER", alertDestinationsTable);
            alertDestinationsTable.Columns.Add("ChannelId", channelIdColumn);
            var countyIdColumn = new Column("CountyId", "TEXT", alertDestinationsTable);
            alertDestinationsTable.Columns.Add("CountyId", countyIdColumn);
            var latitudeColumn = new Column("Latitude", "TEXT", alertDestinationsTable);
            alertDestinationsTable.Columns.Add("Latitude", latitudeColumn);
            var longitudeColumn = new Column("Longitude", "TEXT", alertDestinationsTable);
            alertDestinationsTable.Columns.Add("Longitude", longitudeColumn);
            var radarImageUrlColumn = new Column("RadarImageUrl", "TEXT", alertDestinationsTable);
            alertDestinationsTable.Columns.Add("RadarImageUrl", radarImageUrlColumn);
            var zoneIdColumn = new Column("ZoneId", "TEXT", alertDestinationsTable);
            alertDestinationsTable.Columns.Add("ZoneId", zoneIdColumn);
            var pK_AlertDestinations = new UniqueConstraint("PK_AlertDestinations", alertDestinationsTable, new[] { idColumn });
            alertDestinationsTable.PrimaryKey = pK_AlertDestinations;
            var pK_AlertDestinationsUc = RelationalModel.GetKey(this,
                "WeatherGoat.Data.Entities.AlertDestination",
                new[] { "Id" });
            pK_AlertDestinations.MappedKeys.Add(pK_AlertDestinationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AlertDestinationsUc).Add(pK_AlertDestinations);
            alertDestinationsTable.UniqueConstraints.Add("PK_AlertDestinations", pK_AlertDestinations);
            relationalModel.Tables.Add(("AlertDestinations", null), alertDestinationsTable);
            var alertDestinationsTableMapping = new TableMapping(alertDestination, alertDestinationsTable, true);
            alertDestinationsTable.AddTypeMapping(alertDestinationsTableMapping, false);
            tableMappings.Add(alertDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, alertDestination.FindProperty("Id")!, alertDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(autoCleanupColumn, alertDestination.FindProperty("AutoCleanup")!, alertDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn, alertDestination.FindProperty("ChannelId")!, alertDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(countyIdColumn, alertDestination.FindProperty("CountyId")!, alertDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(latitudeColumn, alertDestination.FindProperty("Latitude")!, alertDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(longitudeColumn, alertDestination.FindProperty("Longitude")!, alertDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(radarImageUrlColumn, alertDestination.FindProperty("RadarImageUrl")!, alertDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(zoneIdColumn, alertDestination.FindProperty("ZoneId")!, alertDestinationsTableMapping);

            var feature = FindEntityType("WeatherGoat.Data.Entities.Feature")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            feature.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var weatherGoatDataEntitiesFeatureTableBase = new TableBase("WeatherGoat.Data.Entities.Feature", null, relationalModel);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "TEXT", weatherGoatDataEntitiesFeatureTableBase);
            weatherGoatDataEntitiesFeatureTableBase.Columns.Add("Description", descriptionColumnBase);
            var enabledColumnBase = new ColumnBase<ColumnMappingBase>("Enabled", "INTEGER", weatherGoatDataEntitiesFeatureTableBase);
            weatherGoatDataEntitiesFeatureTableBase.Columns.Add("Enabled", enabledColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", weatherGoatDataEntitiesFeatureTableBase);
            weatherGoatDataEntitiesFeatureTableBase.Columns.Add("Id", idColumnBase0);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", weatherGoatDataEntitiesFeatureTableBase);
            weatherGoatDataEntitiesFeatureTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("WeatherGoat.Data.Entities.Feature", weatherGoatDataEntitiesFeatureTableBase);
            var weatherGoatDataEntitiesFeatureMappingBase = new TableMappingBase<ColumnMappingBase>(feature, weatherGoatDataEntitiesFeatureTableBase, true);
            weatherGoatDataEntitiesFeatureTableBase.AddTypeMapping(weatherGoatDataEntitiesFeatureMappingBase, false);
            defaultTableMappings0.Add(weatherGoatDataEntitiesFeatureMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, feature.FindProperty("Id")!, weatherGoatDataEntitiesFeatureMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, feature.FindProperty("Description")!, weatherGoatDataEntitiesFeatureMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enabledColumnBase, feature.FindProperty("Enabled")!, weatherGoatDataEntitiesFeatureMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, feature.FindProperty("Name")!, weatherGoatDataEntitiesFeatureMappingBase);

            var tableMappings0 = new List<TableMapping>();
            feature.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var featuresTable = new Table("Features", null, relationalModel);
            var idColumn0 = new Column("Id", "TEXT", featuresTable);
            featuresTable.Columns.Add("Id", idColumn0);
            var descriptionColumn = new Column("Description", "TEXT", featuresTable);
            featuresTable.Columns.Add("Description", descriptionColumn);
            var enabledColumn = new Column("Enabled", "INTEGER", featuresTable);
            featuresTable.Columns.Add("Enabled", enabledColumn);
            var nameColumn = new Column("Name", "TEXT", featuresTable);
            featuresTable.Columns.Add("Name", nameColumn);
            var pK_Features = new UniqueConstraint("PK_Features", featuresTable, new[] { idColumn0 });
            featuresTable.PrimaryKey = pK_Features;
            var pK_FeaturesUc = RelationalModel.GetKey(this,
                "WeatherGoat.Data.Entities.Feature",
                new[] { "Id" });
            pK_Features.MappedKeys.Add(pK_FeaturesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FeaturesUc).Add(pK_Features);
            featuresTable.UniqueConstraints.Add("PK_Features", pK_Features);
            relationalModel.Tables.Add(("Features", null), featuresTable);
            var featuresTableMapping = new TableMapping(feature, featuresTable, true);
            featuresTable.AddTypeMapping(featuresTableMapping, false);
            tableMappings0.Add(featuresTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, feature.FindProperty("Id")!, featuresTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, feature.FindProperty("Description")!, featuresTableMapping);
            RelationalModel.CreateColumnMapping(enabledColumn, feature.FindProperty("Enabled")!, featuresTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, feature.FindProperty("Name")!, featuresTableMapping);

            var forecastDestination = FindEntityType("WeatherGoat.Data.Entities.ForecastDestination")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            forecastDestination.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var weatherGoatDataEntitiesForecastDestinationTableBase = new TableBase("WeatherGoat.Data.Entities.ForecastDestination", null, relationalModel);
            var autoCleanupColumnBase0 = new ColumnBase<ColumnMappingBase>("AutoCleanup", "INTEGER", weatherGoatDataEntitiesForecastDestinationTableBase);
            weatherGoatDataEntitiesForecastDestinationTableBase.Columns.Add("AutoCleanup", autoCleanupColumnBase0);
            var channelIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ChannelId", "INTEGER", weatherGoatDataEntitiesForecastDestinationTableBase);
            weatherGoatDataEntitiesForecastDestinationTableBase.Columns.Add("ChannelId", channelIdColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", weatherGoatDataEntitiesForecastDestinationTableBase);
            weatherGoatDataEntitiesForecastDestinationTableBase.Columns.Add("Id", idColumnBase1);
            var latitudeColumnBase0 = new ColumnBase<ColumnMappingBase>("Latitude", "TEXT", weatherGoatDataEntitiesForecastDestinationTableBase);
            weatherGoatDataEntitiesForecastDestinationTableBase.Columns.Add("Latitude", latitudeColumnBase0);
            var longitudeColumnBase0 = new ColumnBase<ColumnMappingBase>("Longitude", "TEXT", weatherGoatDataEntitiesForecastDestinationTableBase);
            weatherGoatDataEntitiesForecastDestinationTableBase.Columns.Add("Longitude", longitudeColumnBase0);
            var radarImageUrlColumnBase0 = new ColumnBase<ColumnMappingBase>("RadarImageUrl", "TEXT", weatherGoatDataEntitiesForecastDestinationTableBase);
            weatherGoatDataEntitiesForecastDestinationTableBase.Columns.Add("RadarImageUrl", radarImageUrlColumnBase0);
            relationalModel.DefaultTables.Add("WeatherGoat.Data.Entities.ForecastDestination", weatherGoatDataEntitiesForecastDestinationTableBase);
            var weatherGoatDataEntitiesForecastDestinationMappingBase = new TableMappingBase<ColumnMappingBase>(forecastDestination, weatherGoatDataEntitiesForecastDestinationTableBase, true);
            weatherGoatDataEntitiesForecastDestinationTableBase.AddTypeMapping(weatherGoatDataEntitiesForecastDestinationMappingBase, false);
            defaultTableMappings1.Add(weatherGoatDataEntitiesForecastDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, forecastDestination.FindProperty("Id")!, weatherGoatDataEntitiesForecastDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)autoCleanupColumnBase0, forecastDestination.FindProperty("AutoCleanup")!, weatherGoatDataEntitiesForecastDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase0, forecastDestination.FindProperty("ChannelId")!, weatherGoatDataEntitiesForecastDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latitudeColumnBase0, forecastDestination.FindProperty("Latitude")!, weatherGoatDataEntitiesForecastDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)longitudeColumnBase0, forecastDestination.FindProperty("Longitude")!, weatherGoatDataEntitiesForecastDestinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)radarImageUrlColumnBase0, forecastDestination.FindProperty("RadarImageUrl")!, weatherGoatDataEntitiesForecastDestinationMappingBase);

            var tableMappings1 = new List<TableMapping>();
            forecastDestination.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var forecastDestinationsTable = new Table("ForecastDestinations", null, relationalModel);
            var idColumn1 = new Column("Id", "TEXT", forecastDestinationsTable);
            forecastDestinationsTable.Columns.Add("Id", idColumn1);
            var autoCleanupColumn0 = new Column("AutoCleanup", "INTEGER", forecastDestinationsTable);
            forecastDestinationsTable.Columns.Add("AutoCleanup", autoCleanupColumn0);
            var channelIdColumn0 = new Column("ChannelId", "INTEGER", forecastDestinationsTable);
            forecastDestinationsTable.Columns.Add("ChannelId", channelIdColumn0);
            var latitudeColumn0 = new Column("Latitude", "TEXT", forecastDestinationsTable);
            forecastDestinationsTable.Columns.Add("Latitude", latitudeColumn0);
            var longitudeColumn0 = new Column("Longitude", "TEXT", forecastDestinationsTable);
            forecastDestinationsTable.Columns.Add("Longitude", longitudeColumn0);
            var radarImageUrlColumn0 = new Column("RadarImageUrl", "TEXT", forecastDestinationsTable);
            forecastDestinationsTable.Columns.Add("RadarImageUrl", radarImageUrlColumn0);
            var pK_ForecastDestinations = new UniqueConstraint("PK_ForecastDestinations", forecastDestinationsTable, new[] { idColumn1 });
            forecastDestinationsTable.PrimaryKey = pK_ForecastDestinations;
            var pK_ForecastDestinationsUc = RelationalModel.GetKey(this,
                "WeatherGoat.Data.Entities.ForecastDestination",
                new[] { "Id" });
            pK_ForecastDestinations.MappedKeys.Add(pK_ForecastDestinationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ForecastDestinationsUc).Add(pK_ForecastDestinations);
            forecastDestinationsTable.UniqueConstraints.Add("PK_ForecastDestinations", pK_ForecastDestinations);
            relationalModel.Tables.Add(("ForecastDestinations", null), forecastDestinationsTable);
            var forecastDestinationsTableMapping = new TableMapping(forecastDestination, forecastDestinationsTable, true);
            forecastDestinationsTable.AddTypeMapping(forecastDestinationsTableMapping, false);
            tableMappings1.Add(forecastDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, forecastDestination.FindProperty("Id")!, forecastDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(autoCleanupColumn0, forecastDestination.FindProperty("AutoCleanup")!, forecastDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn0, forecastDestination.FindProperty("ChannelId")!, forecastDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(latitudeColumn0, forecastDestination.FindProperty("Latitude")!, forecastDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(longitudeColumn0, forecastDestination.FindProperty("Longitude")!, forecastDestinationsTableMapping);
            RelationalModel.CreateColumnMapping(radarImageUrlColumn0, forecastDestination.FindProperty("RadarImageUrl")!, forecastDestinationsTableMapping);

            var sentAlert = FindEntityType("WeatherGoat.Data.Entities.SentAlert")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            sentAlert.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var weatherGoatDataEntitiesSentAlertTableBase = new TableBase("WeatherGoat.Data.Entities.SentAlert", null, relationalModel);
            var alertIdColumnBase = new ColumnBase<ColumnMappingBase>("AlertId", "TEXT", weatherGoatDataEntitiesSentAlertTableBase);
            weatherGoatDataEntitiesSentAlertTableBase.Columns.Add("AlertId", alertIdColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", weatherGoatDataEntitiesSentAlertTableBase);
            weatherGoatDataEntitiesSentAlertTableBase.Columns.Add("Id", idColumnBase2);
            relationalModel.DefaultTables.Add("WeatherGoat.Data.Entities.SentAlert", weatherGoatDataEntitiesSentAlertTableBase);
            var weatherGoatDataEntitiesSentAlertMappingBase = new TableMappingBase<ColumnMappingBase>(sentAlert, weatherGoatDataEntitiesSentAlertTableBase, true);
            weatherGoatDataEntitiesSentAlertTableBase.AddTypeMapping(weatherGoatDataEntitiesSentAlertMappingBase, false);
            defaultTableMappings2.Add(weatherGoatDataEntitiesSentAlertMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, sentAlert.FindProperty("Id")!, weatherGoatDataEntitiesSentAlertMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)alertIdColumnBase, sentAlert.FindProperty("AlertId")!, weatherGoatDataEntitiesSentAlertMappingBase);

            var tableMappings2 = new List<TableMapping>();
            sentAlert.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var sentAlertsTable = new Table("SentAlerts", null, relationalModel);
            var idColumn2 = new Column("Id", "TEXT", sentAlertsTable);
            sentAlertsTable.Columns.Add("Id", idColumn2);
            var alertIdColumn = new Column("AlertId", "TEXT", sentAlertsTable);
            sentAlertsTable.Columns.Add("AlertId", alertIdColumn);
            var pK_SentAlerts = new UniqueConstraint("PK_SentAlerts", sentAlertsTable, new[] { idColumn2 });
            sentAlertsTable.PrimaryKey = pK_SentAlerts;
            var pK_SentAlertsUc = RelationalModel.GetKey(this,
                "WeatherGoat.Data.Entities.SentAlert",
                new[] { "Id" });
            pK_SentAlerts.MappedKeys.Add(pK_SentAlertsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SentAlertsUc).Add(pK_SentAlerts);
            sentAlertsTable.UniqueConstraints.Add("PK_SentAlerts", pK_SentAlerts);
            relationalModel.Tables.Add(("SentAlerts", null), sentAlertsTable);
            var sentAlertsTableMapping = new TableMapping(sentAlert, sentAlertsTable, true);
            sentAlertsTable.AddTypeMapping(sentAlertsTableMapping, false);
            tableMappings2.Add(sentAlertsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, sentAlert.FindProperty("Id")!, sentAlertsTableMapping);
            RelationalModel.CreateColumnMapping(alertIdColumn, sentAlert.FindProperty("AlertId")!, sentAlertsTableMapping);

            var volatileMessage = FindEntityType("WeatherGoat.Data.Entities.VolatileMessage")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            volatileMessage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var weatherGoatDataEntitiesVolatileMessageTableBase = new TableBase("WeatherGoat.Data.Entities.VolatileMessage", null, relationalModel);
            var channelIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ChannelId", "INTEGER", weatherGoatDataEntitiesVolatileMessageTableBase);
            weatherGoatDataEntitiesVolatileMessageTableBase.Columns.Add("ChannelId", channelIdColumnBase1);
            var expiresAtColumnBase = new ColumnBase<ColumnMappingBase>("ExpiresAt", "TEXT", weatherGoatDataEntitiesVolatileMessageTableBase);
            weatherGoatDataEntitiesVolatileMessageTableBase.Columns.Add("ExpiresAt", expiresAtColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", weatherGoatDataEntitiesVolatileMessageTableBase);
            weatherGoatDataEntitiesVolatileMessageTableBase.Columns.Add("Id", idColumnBase3);
            var messageIdColumnBase = new ColumnBase<ColumnMappingBase>("MessageId", "INTEGER", weatherGoatDataEntitiesVolatileMessageTableBase);
            weatherGoatDataEntitiesVolatileMessageTableBase.Columns.Add("MessageId", messageIdColumnBase);
            relationalModel.DefaultTables.Add("WeatherGoat.Data.Entities.VolatileMessage", weatherGoatDataEntitiesVolatileMessageTableBase);
            var weatherGoatDataEntitiesVolatileMessageMappingBase = new TableMappingBase<ColumnMappingBase>(volatileMessage, weatherGoatDataEntitiesVolatileMessageTableBase, true);
            weatherGoatDataEntitiesVolatileMessageTableBase.AddTypeMapping(weatherGoatDataEntitiesVolatileMessageMappingBase, false);
            defaultTableMappings3.Add(weatherGoatDataEntitiesVolatileMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, volatileMessage.FindProperty("Id")!, weatherGoatDataEntitiesVolatileMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase1, volatileMessage.FindProperty("ChannelId")!, weatherGoatDataEntitiesVolatileMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiresAtColumnBase, volatileMessage.FindProperty("ExpiresAt")!, weatherGoatDataEntitiesVolatileMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageIdColumnBase, volatileMessage.FindProperty("MessageId")!, weatherGoatDataEntitiesVolatileMessageMappingBase);

            var tableMappings3 = new List<TableMapping>();
            volatileMessage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var volatileMessagesTable = new Table("VolatileMessages", null, relationalModel);
            var idColumn3 = new Column("Id", "TEXT", volatileMessagesTable);
            volatileMessagesTable.Columns.Add("Id", idColumn3);
            var channelIdColumn1 = new Column("ChannelId", "INTEGER", volatileMessagesTable);
            volatileMessagesTable.Columns.Add("ChannelId", channelIdColumn1);
            var expiresAtColumn = new Column("ExpiresAt", "TEXT", volatileMessagesTable);
            volatileMessagesTable.Columns.Add("ExpiresAt", expiresAtColumn);
            var messageIdColumn = new Column("MessageId", "INTEGER", volatileMessagesTable);
            volatileMessagesTable.Columns.Add("MessageId", messageIdColumn);
            var pK_VolatileMessages = new UniqueConstraint("PK_VolatileMessages", volatileMessagesTable, new[] { idColumn3 });
            volatileMessagesTable.PrimaryKey = pK_VolatileMessages;
            var pK_VolatileMessagesUc = RelationalModel.GetKey(this,
                "WeatherGoat.Data.Entities.VolatileMessage",
                new[] { "Id" });
            pK_VolatileMessages.MappedKeys.Add(pK_VolatileMessagesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VolatileMessagesUc).Add(pK_VolatileMessages);
            volatileMessagesTable.UniqueConstraints.Add("PK_VolatileMessages", pK_VolatileMessages);
            relationalModel.Tables.Add(("VolatileMessages", null), volatileMessagesTable);
            var volatileMessagesTableMapping = new TableMapping(volatileMessage, volatileMessagesTable, true);
            volatileMessagesTable.AddTypeMapping(volatileMessagesTableMapping, false);
            tableMappings3.Add(volatileMessagesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, volatileMessage.FindProperty("Id")!, volatileMessagesTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn1, volatileMessage.FindProperty("ChannelId")!, volatileMessagesTableMapping);
            RelationalModel.CreateColumnMapping(expiresAtColumn, volatileMessage.FindProperty("ExpiresAt")!, volatileMessagesTableMapping);
            RelationalModel.CreateColumnMapping(messageIdColumn, volatileMessage.FindProperty("MessageId")!, volatileMessagesTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
