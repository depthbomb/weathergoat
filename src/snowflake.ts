import { Snowflake } from '@sapphire/snowflake';

type SnowflakeType = string | bigint;

export const enum SnowflakeReturnType {
	BigInt,
	String,
}

/**
 * The epoch used to generate snowflake ID throughout the application.
 */
export const epoch = new Date('August 5, 2022 19:13:00 GMT-0500');

/**
 * The {@link Snowflake} instance used in generating snowflake IDs.
 *
 * @see {@link epoch}
 * @see {@link Snowflake}
 */
export const snowflake = new Snowflake(epoch);

/**
 * Generates a unique snowflake ID and returns it as a string.
 */
export function generateSnowflake(): string;
/**
 * Generates a unique snowflake ID and returns it as a string.
 *
 * @param returnType The return type of the generated snowflake ID.
 */
export function generateSnowflake(returnType: SnowflakeReturnType.String): string;
/**
 * Generates a unique snowflake ID and returns it as a bigint.
 *
 * @param returnType The return type of the generated snowflake ID.
 */
export function generateSnowflake(returnType: SnowflakeReturnType.BigInt): bigint;
export function generateSnowflake(returnType: SnowflakeReturnType = SnowflakeReturnType.String): SnowflakeType {
	const sf = snowflake.generate();
	if (returnType === SnowflakeReturnType.String) {
		return sf.toString();
	}

	return sf;
}

/**
 * Returns `true` if the {@link input} is a valid snowflake that is able to be generated by the
 * application, `false` otherwise.
 *
 * @param input The {@link SnowflakeType|snowflake} to check.
 *
 * @see {@link epoch}
 * @see {@link snowflake}
 * @see {@link Snowflake}
 */
export function isValidSnowflake(input: SnowflakeType): boolean {
	try {
		const parts = snowflake.deconstruct(input);
		return parts.epoch === BigInt(epoch.getTime());
	} catch {
		return false;
	}
}
